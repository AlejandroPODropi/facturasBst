# Cloud Build Configuration para GCP
# Este archivo define el pipeline de CI/CD para Google Cloud Platform

steps:
  # Paso 1: Build de la imagen del backend
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'build', 
      '-t', 'us-central1-docker.pkg.dev/$PROJECT_ID/facturas-repo/backend:$COMMIT_SHA',
      '-t', 'us-central1-docker.pkg.dev/$PROJECT_ID/facturas-repo/backend:latest',
      './backend'
    ]
    dir: '.'

  # Paso 2: Build de la imagen del frontend
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'build', 
      '-t', 'us-central1-docker.pkg.dev/$PROJECT_ID/facturas-repo/frontend:$COMMIT_SHA',
      '-t', 'us-central1-docker.pkg.dev/$PROJECT_ID/facturas-repo/frontend:latest',
      './frontend'
    ]
    dir: '.'

  # Paso 3: Push de im치genes al Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'us-central1-docker.pkg.dev/$PROJECT_ID/facturas-repo/backend:$COMMIT_SHA']

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'us-central1-docker.pkg.dev/$PROJECT_ID/facturas-repo/backend:latest']

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'us-central1-docker.pkg.dev/$PROJECT_ID/facturas-repo/frontend:$COMMIT_SHA']

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'us-central1-docker.pkg.dev/$PROJECT_ID/facturas-repo/frontend:latest']

  # Paso 4: Desplegar backend en Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args: [
      'run', 'deploy', 'facturas-backend',
      '--image', 'us-central1-docker.pkg.dev/$PROJECT_ID/facturas-repo/backend:$COMMIT_SHA',
      '--platform', 'managed',
      '--region', 'us-central1',
      '--allow-unauthenticated',
      '--port', '8000',
      '--memory', '2Gi',
      '--cpu', '2',
      '--max-instances', '10',
      '--min-instances', '0',
      '--set-env-vars', 'DATABASE_URL=postgresql://boosting_user:Boosting2024!Secure@/facturas_boosting?host=/cloudsql/$PROJECT_ID:us-central1:facturas-db',
      '--add-cloudsql-instances', '$PROJECT_ID:us-central1:facturas-db'
    ]

  # Paso 5: Obtener URL del backend para el frontend
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        BACKEND_URL=$$(gcloud run services describe facturas-backend --region=us-central1 --format="value(status.url)")
        echo "Backend URL: $$BACKEND_URL"
        echo "VITE_API_URL=$$BACKEND_URL" > frontend/.env.production

  # Paso 6: Build del frontend con la URL del backend
  - name: 'node:18'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        cd frontend
        npm ci
        npm run build

  # Paso 7: Subir frontend a Cloud Storage
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gsutil -m cp -r frontend/dist/* gs://facturas-frontend-$PROJECT_ID/
        gsutil iam ch allUsers:objectViewer gs://facturas-frontend-$PROJECT_ID

  # Paso 8: Ejecutar migraciones de base de datos
  - name: 'us-central1-docker.pkg.dev/$PROJECT_ID/facturas-repo/backend:$COMMIT_SHA'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        alembic upgrade head

# Configuraci칩n de opciones
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'

# Timeout del build (30 minutos)
timeout: '1800s'

# Im치genes que se crear치n
images:
  - 'us-central1-docker.pkg.dev/$PROJECT_ID/facturas-repo/backend:$COMMIT_SHA'
  - 'us-central1-docker.pkg.dev/$PROJECT_ID/facturas-repo/backend:latest'
  - 'us-central1-docker.pkg.dev/$PROJECT_ID/facturas-repo/frontend:$COMMIT_SHA'
  - 'us-central1-docker.pkg.dev/$PROJECT_ID/facturas-repo/frontend:latest'
