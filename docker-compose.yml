version: '3.8'

services:
  # Base de datos PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: facturas_db
    environment:
      POSTGRES_DB: facturas_boosting
      POSTGRES_USER: boosting_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-boosting_password_2024}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U boosting_user -d facturas_boosting"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend FastAPI
  backend:
    build: ./backend
    container_name: facturas_backend
    environment:
      DATABASE_URL: postgresql://boosting_user:${DB_PASSWORD:-boosting_password_2024}@db:5432/facturas_boosting
      GMAIL_CREDENTIALS_FILE: credentials.json
      GMAIL_TOKEN_FILE: token.json
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,127.0.0.1}
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/credentials.json:/app/credentials.json:ro
      - ./backend/token.json:/app/token.json:ro
      - ./backend/logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React
  frontend:
    build: ./frontend
    container_name: facturas_frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis para caché (opcional)
  redis:
    image: redis:7-alpine
    container_name: facturas_redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (para producción)
  nginx:
    image: nginx:alpine
    container_name: facturas_nginx
    ports:
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local

networks:
  default:
    name: facturas_network
